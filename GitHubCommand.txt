
pwd

ls

ls -l

ls -la

cd ..

cd/"Name of folder"

== == == == == == == == == == == == == == ==

git init

git add .

git commit -m "message"


git status

git log

git log -n 2 ("Number of commits you want to see")

git log --author="akashyada" ("name of the other all commits")

git log --since = 2022-07-28 (date in yy-mm-dd formate)
git log --untill=2022-07-12

git log --since="1 week ago"

git log --grap="ignore"

git log --format=fuller


git log --oneline
git log --oneline -6



git diff (before add .)

git diff --staged(compare files content after staging)

git rm "fileName"

git checkout --"file name"

git restore --staged < file > ..." to unstage


git commit --amend -m "message"
(amd is going to change has but last hash)

git checkout "staging area string SH1 " --"fileName"
(Genally we are doing this for returnning the last or whather commit you want to 
go for "where our code working perfectly fine")

AFTER THIS 

GIT RESET 

1 soft
2 mixed
3 hard


git reset HEAD "FileName" 

git reset HEAD~1 
                    => points to the letast
git reset HEAD~2

git reset --hard "SHA1 string" 

git clean -n 

git clean -f (comlete delete files)

# for .gitignore file

# for comments
*.js
*.html
node_modules/
*.mp4
*mp3
!app.js
DS_Store
*.log
Adding exception in .gitignore file


when we commit in project after that we are going to files to ingnore in .gitignore 
then git track into this for this we have to chached 
git rm --cached hello.php 


git dosn't keep track of empty folder 
so we can creat hidden file in uplod folder


git ls-tree
git ls-tree HEAD

git ls-tree master
git ls-tree HEAD~5

branching

git branch

git checkout "branch name"

git checkout -b "new branch name"

git log --graph --oneline --decorate -all

git checkout -- "file name"


git diff "branch name".."branch name"

git branch -m "branchname" "renamed branch name"

git branch -d "branch name"

git branch -D "forcfully delete branch"



